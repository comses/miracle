# Local development Django settings overrides
from .base import *
import ConfigParser
import os

DEBUG = True

os.environ.setdefault('DB_USER', 'miracle')
os.environ.setdefault('DB_HOST', 'db')
os.environ.setdefault('DB_PORT', '5432')
os.environ.setdefault('DB_NAME', 'miracle_metadata')
os.environ.setdefault('DATASETS_DB', 'miracle_datasets')
os.environ.setdefault('DEPLOYR_USER', 'miracle')
os.environ.setdefault('DEPLOYR_URL', 'http://deployr:8000')
os.environ.setdefault('RADIANT_URL', 'https://miracle.comses.net/radiant/')

# DeployR settings
config = ConfigParser.RawConfigParser({'user': get_env_variable('DEPLOYR_USER')})
config.read('/code/deploy/deployr/deployr.conf')
DEFAULT_DEPLOYR_USER = config.get('deployr', 'user')
DEFAULT_DEPLOYR_PASSWORD = config.get('deployr', 'password')
DEPLOYR_URL = get_env_variable('DEPLOYR_URL')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'miracle_metadata',
        'USER': get_env_variable('DB_USER'),
        'HOST': get_env_variable('DB_HOST'),
        'PASSWORD': 'changeme_db',
        'PORT': get_env_variable('DB_PORT'),
    },
    'datasets': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('DATASETS_DB'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': 'FIXME: remember to edit local.py datasets pw',
    },
}

INSTALLED_APPS += (
    'debug_toolbar',
)


EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# disabling i18n until we need it
USE_I18N = False

# DeployR settings
DEFAULT_DEPLOYR_USER = get_env_variable('DEPLOYR_USER')
DEFAULT_DEPLOYR_PASSWORD = 'changeme_deployr'
DEPLOYR_URL = get_env_variable('DEPLOYR_URL')

# Radiant settings
# The url to link to the radiant frame with
# In production this is the link that you need to connect Radiant going through Nginx
# The https:// in the url should not be included
RADIANT_URL = get_env_variable('RADIANT_URL')

# Make this unique, and don't share it with anybody.
SECRET_KEY = 'django_secret_key'

SOCIAL_AUTH_FACEBOOK_KEY = 'facebook_key'
SOCIAL_AUTH_FACEBOOK_SECRET = 'facebook_secret'

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = 'google_key'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'google_secret'

SOCIAL_AUTH_GITHUB_KEY = 'github_key'
SOCIAL_AUTH_GITHUB_SECRET = 'github_secret'

if not os.path.exists(MEDIA_ROOT):
    print("MEDIA_ROOT path '{}' does not exist, trying to create it now.".format(MEDIA_ROOT))
    try:
        os.makedirs(MEDIA_ROOT)
    except:
        print("Unable to create path {}, user uploads will not work properly.".format(MEDIA_ROOT))
